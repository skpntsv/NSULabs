services:
  mongo1:
    image: mongo:6
    container_name: mongo1
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo1_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - crackhash_net

  mongo2:
    image: mongo:6
    container_name: mongo2
    ports:
      - "27018:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo2_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "mongo2", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - crackhash_net

  mongo3:
    image: mongo:6
    container_name: mongo3
    ports:
      - "27019:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    volumes:
      - mongo3_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "mongo3", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - crackhash_net

  mongo-init:
    image: mongo:latest
    container_name: mongo-setup
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    command: >
      bash -c "sleep 10 && mongosh --host mongo1:27017 --eval 'rs.initiate({
        _id: \"rs0\",
        members: [
          {_id: 0, host: \"mongo1:27017\"},
          {_id: 1, host: \"mongo2:27017\"},
          {_id: 2, host: \"mongo3:27017\"}
        ]
      })'"
    restart: "no"
    networks:
      - crackhash_net
  manager:
    build: ./manager
    ports:
      - "8080:8080"
    environment:
      - WORKER_URLS=http://worker1:8081,http://worker2:8082,http://worker3:8083
    networks:
      - crackhash_net

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  worker1:
    build: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - PORT=8081
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      - MONGO_DB=crackhash
      - RABBIT_URI=amqp://guest:guest@rabbitmq:5672/
    networks:
      - crackhash_net

  worker2:
    build: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      - MONGO_DB=crackhash
      - RABBIT_URI=amqp://guest:guest@rabbitmq:5672/
      - PORT=8082
    networks:
      - crackhash_net

  worker3:
    build: ./worker
    environment:
      - MANAGER_URL=http://manager:8080
      - PORT=8083
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      - MONGO_DB=crackhash
      - RABBIT_URI=amqp://guest:guest@rabbitmq:5672/
    networks:
      - crackhash_net

networks:
  crackhash_net:
      driver: bridge

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  rabbitmq_data: